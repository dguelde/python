\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+c1}{\PYGZsh{} Donovan Guelde}
\PYG{c+c1}{\PYGZsh{} CSCI 5352 PS 5}

\PYG{k+kn}{import} \PYG{n+nn}{numpy} \PYG{k+kn}{as} \PYG{n+nn}{np}
\PYG{k+kn}{import} \PYG{n+nn}{matplotlib.pyplot} \PYG{k+kn}{as} \PYG{n+nn}{plt}
\PYG{k+kn}{import} \PYG{n+nn}{igraph}
\PYG{k+kn}{from} \PYG{n+nn}{sklearn.metrics} \PYG{k+kn}{import} \PYG{n}{roc\PYGZus{}auc\PYGZus{}score} \PYG{k}{as} \PYG{n}{auc}
\PYG{k+kn}{import} \PYG{n+nn}{time}

\PYG{n}{INPUTSET}\PYG{o}{=}\PYG{l+m+mi}{0} \PYG{c+c1}{\PYGZsh{}0\PYGZhy{}toy data set, 1\PYGZhy{}boardmember set, 2\PYGZhy{}malaria}
\PYG{n}{numberTrials}\PYG{o}{=}\PYG{l+m+mi}{10}
\PYG{n}{fStep}\PYG{o}{=}\PYG{l+m+mf}{0.02}

\PYG{c+c1}{\PYGZsh{}use igraph to quickly(relatively) calculate common neighbor score}
\PYG{c+c1}{\PYGZsh{}uses association matrix to make igraph instance,}
\PYG{c+c1}{\PYGZsh{}precalculates adjacency lists to find common neighbor score}
\PYG{c+c1}{\PYGZsh{}http://stackoverflow.com/questions/28352211/eficient\PYGZhy{}common\PYGZhy{}neighbors\PYGZhy{}and\PYGZhy{}preferential\PYGZhy{}attachment\PYGZhy{}using\PYGZhy{}igraph}
\PYG{k}{class} \PYG{n+nc}{GraphCalculations}\PYG{p}{(}\PYG{n+nb}{object}\PYG{p}{):}
	\PYG{k}{def} \PYG{n+nf}{\PYGZus{}\PYGZus{}init\PYGZus{}\PYGZus{}}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{,}\PYG{n}{graph}\PYG{p}{):}
		\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{graph}\PYG{o}{=}\PYG{n}{graph}
		\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{adjlist}\PYG{o}{=}\PYG{n+nb}{map}\PYG{p}{(}\PYG{n+nb}{set}\PYG{p}{,}\PYG{n}{graph}\PYG{o}{.}\PYG{n}{get\PYGZus{}adjlist}\PYG{p}{())}
	\PYG{k}{def} \PYG{n+nf}{common\PYGZus{}neighbors}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{,}\PYG{n}{i}\PYG{p}{,}\PYG{n}{j}\PYG{p}{):}
		\PYG{k}{return} \PYG{n}{np}\PYG{o}{.}\PYG{n}{divide}\PYG{p}{(}\PYG{n+nb}{float}\PYG{p}{(}\PYG{n+nb}{len}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{adjlist}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]}\PYG{o}{.}\PYG{n}{intersection}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{adjlist}\PYG{p}{[}\PYG{n}{j}\PYG{p}{]))),}\PYG{n+nb}{len}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{adjlist}\PYG{p}{[}\PYG{n}{i}\PYG{p}{]}\PYG{o}{.}\PYG{n}{union}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{adjlist}\PYG{p}{[}\PYG{n}{j}\PYG{p}{])))}

\PYG{c+c1}{\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}}
\PYG{c+c1}{\PYGZsh{} Some helper functions to speed things up using triangular matrices rather than full n x n \PYGZsh{}}
\PYG{c+c1}{\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}\PYGZsh{}}

\PYG{c+c1}{\PYGZsh{}input upper triangle array, returns symmetric array}
\PYG{k}{def} \PYG{n+nf}{makeSymmetricFromTriangle}\PYG{p}{(}\PYG{n}{array}\PYG{p}{):}
	\PYG{n}{array} \PYG{o}{=} \PYG{n}{np}\PYG{o}{.}\PYG{n}{add}\PYG{p}{(}\PYG{n}{array}\PYG{p}{,}\PYG{n}{array}\PYG{o}{.}\PYG{n}{T}\PYG{p}{)} \PYG{o}{\PYGZhy{}} \PYG{n}{np}\PYG{o}{.}\PYG{n}{diag}\PYG{p}{(}\PYG{n}{array}\PYG{o}{.}\PYG{n}{diagonal}\PYG{p}{())}
	\PYG{k}{return} \PYG{n}{array}

\PYG{c+c1}{\PYGZsh{}returns symmetric array based on average of A[i,j] and A[j,i]}
\PYG{k}{def} \PYG{n+nf}{makeSymmetric}\PYG{p}{(}\PYG{n}{array}\PYG{p}{):}
	\PYG{n}{array}\PYG{o}{=}\PYG{p}{(}\PYG{n}{array}\PYG{o}{+}\PYG{n}{array}\PYG{o}{.}\PYG{n}{T}\PYG{p}{)}\PYG{o}{/}\PYG{l+m+mi}{2}
	\PYG{k}{return} \PYG{n}{array}

\PYG{c+c1}{\PYGZsh{}takes in an array, returns upper triangle as a list}
\PYG{k}{def} \PYG{n+nf}{getTriangleMatrixAsList}\PYG{p}{(}\PYG{n}{array}\PYG{p}{):}
	\PYG{n}{arrayList} \PYG{o}{=} \PYG{n}{array}\PYG{p}{[}\PYG{n}{np}\PYG{o}{.}\PYG{n}{triu\PYGZus{}indices\PYGZus{}from}\PYG{p}{(}\PYG{n}{array}\PYG{p}{)]}\PYG{o}{.}\PYG{n}{tolist}\PYG{p}{()}
	\PYG{k}{return} \PYG{n}{arrayList}

\PYG{k}{def} \PYG{n+nf}{readFile}\PYG{p}{(}\PYG{n}{fileName}\PYG{p}{,}\PYG{n}{mData}\PYG{p}{):}
	\PYG{k}{with} \PYG{p}{(}\PYG{n+nb}{open}\PYG{p}{(}\PYG{n}{mData}\PYG{p}{,}\PYG{l+s+s1}{\PYGZsq{}r\PYGZsq{}}\PYG{p}{))} \PYG{k}{as} \PYG{n}{f}\PYG{p}{:}\PYG{c+c1}{\PYGZsh{}get metadata}
		\PYG{k}{if} \PYG{p}{(}\PYG{n}{INPUTSET}\PYG{o}{!=}\PYG{l+m+mi}{2}\PYG{p}{):} 
			\PYG{n}{f}\PYG{o}{.}\PYG{n}{next}\PYG{p}{()} \PYG{c+c1}{\PYGZsh{}skip label row of boardmember,toy set data}
		\PYG{n}{maxNode}\PYG{o}{=}\PYG{l+m+mi}{0} \PYG{c+c1}{\PYGZsh{}number of nodes in network}
		\PYG{k}{for} \PYG{n}{line} \PYG{o+ow}{in} \PYG{n}{f}\PYG{p}{:}
			\PYG{n}{maxNode}\PYG{o}{+=}\PYG{l+m+mi}{1}
		\PYG{n}{f}\PYG{o}{.}\PYG{n}{seek}\PYG{p}{(}\PYG{l+m+mi}{0}\PYG{p}{,}\PYG{l+m+mi}{0}\PYG{p}{)}
		\PYG{n}{metadata} \PYG{o}{=} \PYG{n}{np}\PYG{o}{.}\PYG{n}{zeros}\PYG{p}{((}\PYG{n}{maxNode}\PYG{p}{))}
		\PYG{k}{if} \PYG{p}{(}\PYG{n}{INPUTSET}\PYG{o}{!=}\PYG{l+m+mi}{2}\PYG{p}{):}
			\PYG{n}{f}\PYG{o}{.}\PYG{n}{next}\PYG{p}{()}
		\PYG{n}{counter}\PYG{o}{=}\PYG{l+m+mi}{0}
		\PYG{k}{for} \PYG{n}{line} \PYG{o+ow}{in} \PYG{n}{f}\PYG{p}{:}
			\PYG{k}{if} \PYG{p}{(}\PYG{n}{INPUTSET}\PYG{o}{!=}\PYG{l+m+mi}{2}\PYG{p}{):}
				\PYG{n}{node}\PYG{p}{,}\PYG{n}{gender}\PYG{o}{=}\PYG{n}{line}\PYG{o}{.}\PYG{n}{split}\PYG{p}{()[}\PYG{l+m+mi}{0}\PYG{p}{],}\PYG{n}{line}\PYG{o}{.}\PYG{n}{split}\PYG{p}{()[}\PYG{o}{\PYGZhy{}}\PYG{l+m+mi}{1}\PYG{p}{:][}\PYG{l+m+mi}{0}\PYG{p}{]}
				\PYG{n}{node}\PYG{o}{=}\PYG{n+nb}{int}\PYG{p}{(}\PYG{n}{node}\PYG{p}{)}\PYG{o}{\PYGZhy{}}\PYG{l+m+mi}{1} \PYG{c+c1}{\PYGZsh{}index from 0, not 1}
				\PYG{n}{gender}\PYG{o}{=}\PYG{n+nb}{int}\PYG{p}{(}\PYG{n}{gender}\PYG{p}{)}
				\PYG{n}{metadata}\PYG{p}{[}\PYG{n}{node}\PYG{p}{]}\PYG{o}{=}\PYG{n}{gender}
			\PYG{k}{else}\PYG{p}{:}
				\PYG{n}{metadata}\PYG{p}{[}\PYG{n}{counter}\PYG{p}{]}\PYG{o}{=}\PYG{n+nb}{int}\PYG{p}{(}\PYG{n}{line}\PYG{p}{)}
				\PYG{n}{counter}\PYG{o}{+=}\PYG{l+m+mi}{1}
	\PYG{n}{f}\PYG{o}{.}\PYG{n}{close}\PYG{p}{()}

	\PYG{n}{metadata} \PYG{o}{=} \PYG{n}{metadata}\PYG{o}{.}\PYG{n}{astype}\PYG{p}{(}\PYG{n+nb}{int}\PYG{p}{)}
	\PYG{c+c1}{\PYGZsh{} build an n x n simple network. }
	\PYG{k}{with} \PYG{p}{(}\PYG{n+nb}{open}\PYG{p}{(}\PYG{n}{fileName}\PYG{p}{,}\PYG{l+s+s1}{\PYGZsq{}r\PYGZsq{}}\PYG{p}{))} \PYG{k}{as} \PYG{n}{f}\PYG{p}{:} 
		\PYG{n}{lines} \PYG{o}{=} \PYG{n}{f}\PYG{o}{.}\PYG{n}{readlines}\PYG{p}{()}
		\PYG{n}{matrix} \PYG{o}{=} \PYG{n}{np}\PYG{o}{.}\PYG{n}{zeros}\PYG{p}{((}\PYG{n}{maxNode}\PYG{p}{,}\PYG{n}{maxNode}\PYG{p}{))} 
		\PYG{k}{for} \PYG{n}{line} \PYG{o+ow}{in} \PYG{n}{lines}\PYG{p}{:}
			\PYG{k}{if} \PYG{p}{(}\PYG{n}{INPUTSET}\PYG{o}{!=}\PYG{l+m+mi}{2}\PYG{p}{):}
				\PYG{n}{node}\PYG{p}{,}\PYG{n}{neighbor} \PYG{o}{=} \PYG{n+nb}{map}\PYG{p}{(}\PYG{n+nb}{int}\PYG{p}{,}\PYG{n}{line}\PYG{o}{.}\PYG{n}{split}\PYG{p}{())}
			\PYG{k}{else}\PYG{p}{:}
				\PYG{n}{node}\PYG{p}{,}\PYG{n}{neighbor} \PYG{o}{=} \PYG{n+nb}{map}\PYG{p}{(}\PYG{n+nb}{int}\PYG{p}{,}\PYG{n}{line}\PYG{o}{.}\PYG{n}{split}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{},\PYGZsq{}}\PYG{p}{))}
			\PYG{n}{node}\PYG{o}{\PYGZhy{}=}\PYG{l+m+mi}{1} \PYG{c+c1}{\PYGZsh{}start at [0], not [1]}
			\PYG{n}{neighbor}\PYG{o}{\PYGZhy{}=}\PYG{l+m+mi}{1}
			\PYG{n}{matrix}\PYG{p}{[}\PYG{n}{node}\PYG{p}{][}\PYG{n}{neighbor}\PYG{p}{]}\PYG{o}{=}\PYG{l+m+mi}{1} 
			\PYG{n}{matrix}\PYG{p}{[}\PYG{n}{neighbor}\PYG{p}{][}\PYG{n}{node}\PYG{p}{]}\PYG{o}{=}\PYG{l+m+mi}{1} \PYG{c+c1}{\PYGZsh{} undirected}
	\PYG{n}{f}\PYG{o}{.}\PYG{n}{close}\PYG{p}{()}
	\PYG{c+c1}{\PYGZsh{}matrix = matrix.astype(int)}
	\PYG{n}{temp} \PYG{o}{=} \PYG{n}{np}\PYG{o}{.}\PYG{n}{where}\PYG{p}{(}\PYG{n}{np}\PYG{o}{.}\PYG{n}{sum}\PYG{p}{(}\PYG{n}{matrix}\PYG{p}{,}\PYG{n}{axis}\PYG{o}{=}\PYG{l+m+mi}{1}\PYG{p}{)}\PYG{o}{==}\PYG{l+m+mi}{0}\PYG{p}{)} \PYG{c+c1}{\PYGZsh{}delete vertices with no neighbor info (different year, data set, etc.)}
	\PYG{n}{matrix}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{delete}\PYG{p}{(}\PYG{n}{matrix}\PYG{p}{,}\PYG{n}{temp}\PYG{p}{,}\PYG{n}{axis}\PYG{o}{=}\PYG{l+m+mi}{0}\PYG{p}{)} 
	\PYG{n}{matrix}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{delete}\PYG{p}{(}\PYG{n}{matrix}\PYG{p}{,}\PYG{n}{temp}\PYG{p}{,}\PYG{n}{axis}\PYG{o}{=}\PYG{l+m+mi}{1}\PYG{p}{)}
	\PYG{n}{metadata}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{delete}\PYG{p}{(}\PYG{n}{metadata}\PYG{p}{,}\PYG{n}{temp}\PYG{p}{)} 
	
	\PYG{c+c1}{\PYGZsh{}matrix=np.ascontiguousarray(matrix)}
	\PYG{n}{metadata}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{ascontiguousarray}\PYG{p}{(}\PYG{n}{metadata}\PYG{p}{)}
	\PYG{k}{return} \PYG{n}{matrix}\PYG{p}{,}\PYG{n}{metadata}

\PYG{k}{def} \PYG{n+nf}{main}\PYG{p}{():}
	\PYG{n}{np}\PYG{o}{.}\PYG{n}{set\PYGZus{}printoptions}\PYG{p}{(}\PYG{n}{linewidth}\PYG{o}{=}\PYG{l+m+mi}{140}\PYG{p}{)}
	\PYG{k}{if}\PYG{p}{(}\PYG{n}{INPUTSET}\PYG{o}{==}\PYG{l+m+mi}{0}\PYG{p}{):}
		\PYG{n}{networkFile}\PYG{o}{=}\PYG{l+s+s1}{\PYGZsq{}toyNetwork.txt\PYGZsq{}}
		\PYG{n}{metadataFile}\PYG{o}{=}\PYG{l+s+s1}{\PYGZsq{}toyMetadata.txt\PYGZsq{}}
	\PYG{k}{if}\PYG{p}{(}\PYG{n}{INPUTSET}\PYG{o}{==}\PYG{l+m+mi}{1}\PYG{p}{):}
		\PYG{n}{networkFile}\PYG{o}{=}\PYG{l+s+s2}{\PYGZdq{}net1m\PYGZus{}2011\PYGZhy{}08\PYGZhy{}01.txt\PYGZdq{}}
		\PYG{n}{metadataFile}\PYG{o}{=}\PYG{l+s+s2}{\PYGZdq{}data\PYGZus{}people.txt\PYGZdq{}}
	\PYG{k}{if}\PYG{p}{(}\PYG{n}{INPUTSET}\PYG{o}{==}\PYG{l+m+mi}{2}\PYG{p}{):}
		\PYG{n}{networkFile}\PYG{o}{=}\PYG{l+s+s1}{\PYGZsq{}HVR\PYGZus{}5.txt\PYGZsq{}}
		\PYG{n}{metadataFile}\PYG{o}{=}\PYG{l+s+s1}{\PYGZsq{}metadata\PYGZus{}CysPoLV.txt\PYGZsq{}}
	\PYG{n}{matrix}\PYG{p}{,}\PYG{n}{metadata}\PYG{o}{=}\PYG{n}{readFile}\PYG{p}{(}\PYG{n}{networkFile}\PYG{p}{,}\PYG{n}{metadataFile}\PYG{p}{)}
	\PYG{n}{length} \PYG{o}{=} \PYG{n+nb}{len}\PYG{p}{(}\PYG{n}{metadata}\PYG{p}{)}
	\PYG{n}{shape}\PYG{o}{=}\PYG{n}{length}\PYG{p}{,}\PYG{n}{length}
	\PYG{n}{numberCategories}\PYG{o}{=}\PYG{n}{metadata}\PYG{o}{.}\PYG{n}{max}\PYG{p}{()}\PYG{o}{\PYGZhy{}}\PYG{n}{metadata}\PYG{o}{.}\PYG{n}{min}\PYG{p}{()}\PYG{o}{+}\PYG{l+m+mi}{1}
	\PYG{n}{f}\PYG{o}{=.}\PYG{l+m+mo}{01}
	\PYG{n}{fCounter}\PYG{o}{=}\PYG{l+m+mi}{0}
	\PYG{n}{degreeProductAccuracyOverF}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{zeros}\PYG{p}{(((}\PYG{o}{.}\PYG{l+m+mi}{99}\PYG{o}{\PYGZhy{}}\PYG{n}{f}\PYG{p}{)}\PYG{o}{/}\PYG{n}{fStep}\PYG{p}{)}\PYG{o}{+}\PYG{l+m+mi}{1}\PYG{p}{)} \PYG{c+c1}{\PYGZsh{}store accuracy results for each f value}
	\PYG{n}{commonNeighborAccuracyOverF}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{zeros}\PYG{p}{(((}\PYG{o}{.}\PYG{l+m+mi}{99}\PYG{o}{\PYGZhy{}}\PYG{n}{f}\PYG{p}{)}\PYG{o}{/}\PYG{n}{fStep}\PYG{p}{)}\PYG{o}{+}\PYG{l+m+mi}{1}\PYG{p}{)}
	\PYG{n}{shortestPathAccuracyOverF}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{zeros}\PYG{p}{(((}\PYG{o}{.}\PYG{l+m+mi}{99}\PYG{o}{\PYGZhy{}}\PYG{n}{f}\PYG{p}{)}\PYG{o}{/}\PYG{n}{fStep}\PYG{p}{)}\PYG{o}{+}\PYG{l+m+mi}{1}\PYG{p}{)}
	\PYG{n}{fValues}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{zeros}\PYG{p}{(((}\PYG{o}{.}\PYG{l+m+mi}{99}\PYG{o}{\PYGZhy{}}\PYG{n}{f}\PYG{p}{)}\PYG{o}{/}\PYG{n}{fStep}\PYG{p}{)}\PYG{o}{+}\PYG{l+m+mi}{1}\PYG{p}{)} \PYG{c+c1}{\PYGZsh{} store f values used for replot, if necessary}
	\PYG{n}{trueLabels}\PYG{o}{=}\PYG{n}{getTriangleMatrixAsList}\PYG{p}{(}\PYG{n}{matrix}\PYG{p}{)} \PYG{c+c1}{\PYGZsh{}true edge set in list format}

	\PYG{k}{while} \PYG{p}{(}\PYG{n}{f} \PYG{o}{\PYGZlt{}=} \PYG{l+m+mf}{1.0}\PYG{p}{):}
		\PYG{n}{start} \PYG{o}{=} \PYG{n}{time}\PYG{o}{.}\PYG{n}{time}\PYG{p}{()}
		\PYG{n}{degreeProductIterationResults}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{zeros}\PYG{p}{((}\PYG{n}{numberTrials}\PYG{p}{))} \PYG{c+c1}{\PYGZsh{}results on each iteration}
		\PYG{n}{commonNeighborIterationResults}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{zeros}\PYG{p}{((}\PYG{n}{numberTrials}\PYG{p}{))}
		\PYG{n}{shortestPathIterationResults}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{zeros}\PYG{p}{((}\PYG{n}{numberTrials}\PYG{p}{))}
		\PYG{n}{iterationCounter}\PYG{o}{=}\PYG{l+m+mi}{0}
		\PYG{c+c1}{\PYGZsh{}start = time.time()}
		\PYG{n}{commonNeighbors}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{empty}\PYG{p}{((}\PYG{n}{length}\PYG{p}{,}\PYG{n}{length}\PYG{p}{))}
		\PYG{k}{for} \PYG{n}{iteration} \PYG{o+ow}{in} \PYG{n+nb}{xrange}\PYG{p}{(}\PYG{n}{numberTrials}\PYG{p}{):}
			\PYG{c+c1}{\PYGZsh{}determine holdout, generate tie\PYGZhy{}breaking noise, hide edges}
			\PYG{n}{associationMatrix}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{copy}\PYG{p}{(}\PYG{n}{matrix}\PYG{p}{)} \PYG{c+c1}{\PYGZsh{}copy original network}
			\PYG{n}{randomValues} \PYG{o}{=} \PYG{n}{np}\PYG{o}{.}\PYG{n}{random}\PYG{o}{.}\PYG{n}{random}\PYG{p}{((}\PYG{n}{length}\PYG{p}{,}\PYG{n}{length}\PYG{p}{))} \PYG{c+c1}{\PYGZsh{}matrix of \PYGZsq{}coin flips\PYGZsq{} to compare against f for our test set}
			\PYG{n}{hiddenEdges}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{where}\PYG{p}{(}\PYG{n}{randomValues}\PYG{o}{\PYGZgt{}}\PYG{n}{f}\PYG{p}{)} \PYG{c+c1}{\PYGZsh{}flip coin}
			\PYG{n}{hiddenEdgeList}\PYG{o}{=}\PYG{n}{associationMatrix}\PYG{p}{[}\PYG{n}{hiddenEdges}\PYG{p}{]}
			\PYG{n}{associationMatrix}\PYG{p}{[}\PYG{n}{hiddenEdges}\PYG{p}{]}\PYG{o}{=}\PYG{l+m+mi}{0} \PYG{c+c1}{\PYGZsh{}hide edges}
			\PYG{n}{associationMatrix}\PYG{o}{=}\PYG{n}{makeSymmetricFromTriangle}\PYG{p}{(}\PYG{n}{associationMatrix}\PYG{p}{)} \PYG{c+c1}{\PYGZsh{}use upper triange (after coin flips) to make association matrix}
			\PYG{n}{randomNoise}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{divide}\PYG{p}{(}\PYG{n}{np}\PYG{o}{.}\PYG{n}{random}\PYG{o}{.}\PYG{n}{random}\PYG{p}{((}\PYG{n}{length}\PYG{p}{,}\PYG{n}{length}\PYG{p}{)),}\PYG{n}{length}\PYG{p}{)}
			
			\PYG{c+c1}{\PYGZsh{}generate degree product scores}
			\PYG{n}{degreeList}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{sum}\PYG{p}{(}\PYG{n}{associationMatrix}\PYG{p}{,}\PYG{n}{axis}\PYG{o}{=}\PYG{l+m+mi}{1}\PYG{p}{)}
			\PYG{n}{degreeProduct}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{add}\PYG{p}{(}\PYG{n}{np}\PYG{o}{.}\PYG{n}{outer}\PYG{p}{(}\PYG{n}{degreeList}\PYG{p}{,}\PYG{n}{degreeList}\PYG{p}{),}\PYG{n}{randomNoise}\PYG{p}{)} \PYG{c+c1}{\PYGZsh{}degree product matrix with noise added to break ties}
			\PYG{n}{degreeProductScores}\PYG{o}{=}\PYG{n}{getTriangleMatrixAsList}\PYG{p}{(}\PYG{n}{degreeProduct}\PYG{p}{)}

			\PYG{c+c1}{\PYGZsh{}generate normalized common neighbor score}
			\PYG{n}{g} \PYG{o}{=} \PYG{n}{igraph}\PYG{o}{.}\PYG{n}{Graph}\PYG{o}{.}\PYG{n}{Adjacency}\PYG{p}{((}\PYG{n}{associationMatrix}\PYG{o}{.}\PYG{n}{astype}\PYG{p}{(}\PYG{n+nb}{bool}\PYG{p}{))}\PYG{o}{.}\PYG{n}{tolist}\PYG{p}{())}
			\PYG{n}{neighborStruct}\PYG{o}{=}\PYG{n}{GraphCalculations}\PYG{p}{(}\PYG{n}{g}\PYG{p}{)}
			\PYG{k}{for} \PYG{n}{index} \PYG{o+ow}{in} \PYG{n+nb}{range}\PYG{p}{(}\PYG{l+m+mi}{0}\PYG{p}{,}\PYG{n}{length}\PYG{p}{):} \PYG{c+c1}{\PYGZsh{}make upper triangle matrix via loops}
				\PYG{k}{for} \PYG{n}{index2} \PYG{o+ow}{in} \PYG{n+nb}{range}\PYG{p}{(}\PYG{n}{index}\PYG{p}{,}\PYG{n}{length}\PYG{p}{):}
					\PYG{n}{commonNeighbors}\PYG{p}{[}\PYG{n}{index}\PYG{p}{][}\PYG{n}{index2}\PYG{p}{]}\PYG{o}{=}\PYG{n}{neighborStruct}\PYG{o}{.}\PYG{n}{common\PYGZus{}neighbors}\PYG{p}{(}\PYG{n}{index}\PYG{p}{,}\PYG{n}{index2}\PYG{p}{)}
			\PYG{n}{commonNeighbors}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{nan\PYGZus{}to\PYGZus{}num}\PYG{p}{(}\PYG{n}{commonNeighbors}\PYG{p}{)}
			\PYG{n}{commonNeighbors}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{add}\PYG{p}{(}\PYG{n}{commonNeighbors}\PYG{p}{,}\PYG{n}{randomNoise}\PYG{p}{)}
			\PYG{n}{commonNeighborScores}\PYG{o}{=}\PYG{n}{getTriangleMatrixAsList}\PYG{p}{(}\PYG{n}{commonNeighbors}\PYG{p}{)}

			\PYG{c+c1}{\PYGZsh{}generate shortest path score}
			\PYG{n}{shortestPath}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{asarray}\PYG{p}{(}\PYG{n}{g}\PYG{o}{.}\PYG{n}{shortest\PYGZus{}paths\PYGZus{}dijkstra}\PYG{p}{())}
			\PYG{n}{shortestPath}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{add}\PYG{p}{(}\PYG{n}{shortestPath}\PYG{p}{,}\PYG{n}{randomNoise}\PYG{p}{)}
			\PYG{n}{shortestPath}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{reciprocal}\PYG{p}{(}\PYG{n}{shortestPath}\PYG{p}{)} \PYG{c+c1}{\PYGZsh{}nodes with no path will have pathlength = (1/noise) \PYGZhy{}\PYGZgt{} very large}
			\PYG{n}{shortestPathScores}\PYG{o}{=}\PYG{n}{getTriangleMatrixAsList}\PYG{p}{(}\PYG{n}{shortestPath}\PYG{p}{)}

			\PYG{c+c1}{\PYGZsh{}get/store AUC scores for iteration}
			\PYG{n}{degreeProductResults}\PYG{o}{=}\PYG{n}{auc}\PYG{p}{(}\PYG{n}{trueLabels}\PYG{p}{,}\PYG{n}{degreeProductScores}\PYG{p}{)}
			\PYG{n}{commonNeighborResults}\PYG{o}{=}\PYG{n}{auc}\PYG{p}{(}\PYG{n}{trueLabels}\PYG{p}{,}\PYG{n}{commonNeighborScores}\PYG{p}{)}
			\PYG{n}{shortestPathResults}\PYG{o}{=}\PYG{n}{auc}\PYG{p}{(}\PYG{n}{trueLabels}\PYG{p}{,}\PYG{n}{shortestPathScores}\PYG{p}{)}
			\PYG{n}{degreeProductIterationResults}\PYG{p}{[}\PYG{n}{iterationCounter}\PYG{p}{]}\PYG{o}{=}\PYG{n}{degreeProductResults}
			\PYG{n}{commonNeighborIterationResults}\PYG{p}{[}\PYG{n}{iterationCounter}\PYG{p}{]}\PYG{o}{=}\PYG{n}{commonNeighborResults}
			\PYG{n}{shortestPathIterationResults}\PYG{p}{[}\PYG{n}{iterationCounter}\PYG{p}{]}\PYG{o}{=}\PYG{n}{shortestPathResults}
			\PYG{n}{iterationCounter}\PYG{o}{+=}\PYG{l+m+mi}{1}

		\PYG{c+c1}{\PYGZsh{}accuracy results for each f value}
		\PYG{n}{degreeProductAccuracyOverF}\PYG{p}{[}\PYG{n}{fCounter}\PYG{p}{]}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{average}\PYG{p}{(}\PYG{n}{degreeProductIterationResults}\PYG{p}{)} 
		\PYG{n}{commonNeighborAccuracyOverF}\PYG{p}{[}\PYG{n}{fCounter}\PYG{p}{]}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{average}\PYG{p}{(}\PYG{n}{commonNeighborIterationResults}\PYG{p}{)} 
		\PYG{n}{shortestPathAccuracyOverF}\PYG{p}{[}\PYG{n}{fCounter}\PYG{p}{]}\PYG{o}{=}\PYG{n}{np}\PYG{o}{.}\PYG{n}{average}\PYG{p}{(}\PYG{n}{shortestPathIterationResults}\PYG{p}{)}
		\PYG{n}{fValues}\PYG{p}{[}\PYG{n}{fCounter}\PYG{p}{]}\PYG{o}{=}\PYG{n}{f}
		\PYG{k}{print} \PYG{n}{f}\PYG{p}{,}\PYG{n}{time}\PYG{o}{.}\PYG{n}{time}\PYG{p}{()}\PYG{o}{\PYGZhy{}}\PYG{n}{start}
		\PYG{n}{f}\PYG{o}{+=}\PYG{n}{fStep}
		\PYG{n}{fCounter}\PYG{o}{+=}\PYG{l+m+mi}{1}
	

	
	\PYG{n}{plt}\PYG{o}{.}\PYG{n}{plot}\PYG{p}{(}\PYG{n}{fValues}\PYG{p}{,}\PYG{n}{degreeProductAccuracyOverF}\PYG{p}{)}
	\PYG{n}{plt}\PYG{o}{.}\PYG{n}{plot}\PYG{p}{(}\PYG{n}{fValues}\PYG{p}{,}\PYG{n}{commonNeighborAccuracyOverF}\PYG{p}{)}
	\PYG{n}{plt}\PYG{o}{.}\PYG{n}{plot}\PYG{p}{(}\PYG{n}{fValues}\PYG{p}{,}\PYG{n}{shortestPathAccuracyOverF}\PYG{p}{)}
	\PYG{n}{plt}\PYG{o}{.}\PYG{n}{legend}\PYG{p}{([}\PYG{l+s+s1}{\PYGZsq{}Degree Product\PYGZsq{}}\PYG{p}{,}\PYG{l+s+s1}{\PYGZsq{}Common Neighbor\PYGZsq{}}\PYG{p}{,}\PYG{l+s+s1}{\PYGZsq{}Shortest Path\PYGZsq{}}\PYG{p}{],}\PYG{n}{loc}\PYG{o}{=}\PYG{l+m+mi}{4}\PYG{p}{)}
	\PYG{n}{plt}\PYG{o}{.}\PYG{n}{xlabel}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{}f\PYGZsq{}}\PYG{p}{)}
	\PYG{n}{plt}\PYG{o}{.}\PYG{n}{ylabel}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{}AUC\PYGZsq{}}\PYG{p}{)}
	\PYG{c+c1}{\PYGZsh{}plt.savefig(\PYGZsq{}./predictEdges\PYGZob{}\PYGZcb{}\PYGZob{}\PYGZcb{}Iterations.png\PYGZsq{}.format(networkFile[:\PYGZhy{}4],numberTrials))}
	\PYG{n}{plt}\PYG{o}{.}\PYG{n}{show}\PYG{p}{()}

	\PYG{c+c1}{\PYGZsh{}np.savetxt(\PYGZsq{}./degreeProduct\PYGZob{}\PYGZcb{}\PYGZob{}\PYGZcb{}accuracy.txt\PYGZsq{}.format(networkFile[:\PYGZhy{}4],numberTrials),degreeProductAccuracyOverF)}
	\PYG{c+c1}{\PYGZsh{}np.savetxt(\PYGZsq{}./commonNeighbors\PYGZob{}\PYGZcb{}\PYGZob{}\PYGZcb{}accuracy.txt\PYGZsq{}.format(networkFile[:\PYGZhy{}4],numberTrials),commonNeighborAccuracyOverF)}
	\PYG{c+c1}{\PYGZsh{}np.savetxt(\PYGZsq{}./shortestPath\PYGZob{}\PYGZcb{}\PYGZob{}\PYGZcb{}accuracy.txt\PYGZsq{}.format(networkFile[:\PYGZhy{}4],numberTrials),shortestPathAccuracyOverF)}
	\PYG{c+c1}{\PYGZsh{}np.savetxt(\PYGZsq{}./predictEdges\PYGZob{}\PYGZcb{}\PYGZob{}\PYGZcb{}fValues.txt\PYGZsq{}.format(networkFile[:\PYGZhy{}4],numberTrials),fValues)}
	

\PYG{n}{main}\PYG{p}{()}
\end{Verbatim}
